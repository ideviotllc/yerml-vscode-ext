%YERML 0.1
---

# Valid YERML Grammar Tests

# YERML v0.1

# StandaloneSingleWordComment
# Standalone multi-word comment
    # Standalone multi-word comment tabbed-out
test # Naked name topic, single space comment
Test # Naked type topic, single space comment
test        # Naked name topic, tabbed-out comment
Test        # Naked type topic, tabbed-out comment

# Entity Name Topics
test
_test
__test
test_test
testTest
test1
test123
testTest2
test1Test2Test3

# Entity Type Topics
Test
TestTest
Test_Test
Test1
Test123
TestTest1
Test1Test2Test3

# Entity definitions, no descriptors, with comments
test:
Test:

# One descriptor type, count, with comment
test: *     # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: +     # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: -     # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
Test: 1     # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: 2+    # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: 10-   # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: 0-11  # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}

# One descriptor type, type, with comment
test: Test                  # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
Test: Test2                 # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: Test(AnotherTest)     # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
Test: Test2(AnotherTest)    # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}

# One descriptor type, one constraint, single constraint type with comment
test: = true            # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = 1               # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = 10              # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = 0.1             # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = 'test 1 = *'    # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = "test 1 = 3"    # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = test            # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = (1, 2, 3)       # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = ["a", "b", "c"] # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = {true, false, true} # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}

# One descriptor type, one constraint, all constraint types, with comment
test: = 1               # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: < 1               # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: > 1               # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: <= 1              # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: >= 1              # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: != 1              # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: := 1              # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: _= 1              # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}

# One descriptor type, two constraints, with comment
test: >= 0 <= 1         # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}

# Three descriptor types, varying order, with constraint pair space, with comment
test: 1 Test = 1        # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: 1 = 1 Test        # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: Test 1 = 1        # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: = 1 Test 1        # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}

# Three descriptor types, varying order, without constraint pair space, with comment
test: 1 Test =1         # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: 1 =1 Test         # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: Test 1 =1         # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
test: =1 Test 1         # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}

# Three descriptor types, varying order, with two constraints, with comment
Test: 2 Test = 2 != 1   # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
Test: != 1 Test 2 = 2   # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}

# Miscellaneous tests
test: Test(Test2) = "Test(Test2(Test3))" <= ("Test3")  # Tricky: comment: 1 + - * 1.0 = <= >= < > != _= := : (1, 2, 3) ["4", "5", "6"] {test, test, Test}
